// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bessel_layer_simulation
Rcpp::List bessel_layer_simulation(const double& x, const double& y, const double& s, const double& t, const double& mult);
RcppExport SEXP _layeredBB_bessel_layer_simulation(SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type mult(multSEXP);
    rcpp_result_gen = Rcpp::wrap(bessel_layer_simulation(x, y, s, t, mult));
    return rcpp_result_gen;
END_RCPP
}
// multi_bessel_layer_simulation
Rcpp::List multi_bessel_layer_simulation(const int& dim, const arma::vec& x, const arma::vec& y, const double& s, const double& t, const double& mult);
RcppExport SEXP _layeredBB_multi_bessel_layer_simulation(SEXP dimSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP multSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type mult(multSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_bessel_layer_simulation(dim, x, y, s, t, mult));
    return rcpp_result_gen;
END_RCPP
}
// Brownian_bridge_path_sampler
Rcpp::List Brownian_bridge_path_sampler(const double& x, const double& y, const double& s, const double& t, const Rcpp::NumericVector& times);
RcppExport SEXP _layeredBB_Brownian_bridge_path_sampler(SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(Brownian_bridge_path_sampler(x, y, s, t, times));
    return rcpp_result_gen;
END_RCPP
}
// multi_brownian_bridge
Rcpp::List multi_brownian_bridge(const int& dim, const Rcpp::NumericVector& x, const Rcpp::NumericVector& y, const double& s, const double& t, const Rcpp::NumericVector& times);
RcppExport SEXP _layeredBB_multi_brownian_bridge(SEXP dimSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_brownian_bridge(dim, x, y, s, t, times));
    return rcpp_result_gen;
END_RCPP
}
// min_sampler
Rcpp::NumericVector min_sampler(const double& x, const double& y, const double& s, const double& t, const double& low_bound, const double& up_bound, const bool& checks);
RcppExport SEXP _layeredBB_min_sampler(SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP low_boundSEXP, SEXP up_boundSEXP, SEXP checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type low_bound(low_boundSEXP);
    Rcpp::traits::input_parameter< const double& >::type up_bound(up_boundSEXP);
    Rcpp::traits::input_parameter< const bool& >::type checks(checksSEXP);
    rcpp_result_gen = Rcpp::wrap(min_sampler(x, y, s, t, low_bound, up_bound, checks));
    return rcpp_result_gen;
END_RCPP
}
// min_Bessel_bridge_sampler
double min_Bessel_bridge_sampler(const double& x, const double& y, const double& s, const double& t, const double& m, const double& tau, const double& q, const bool& checks);
RcppExport SEXP _layeredBB_min_Bessel_bridge_sampler(SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP mSEXP, SEXP tauSEXP, SEXP qSEXP, SEXP checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const bool& >::type checks(checksSEXP);
    rcpp_result_gen = Rcpp::wrap(min_Bessel_bridge_sampler(x, y, s, t, m, tau, q, checks));
    return rcpp_result_gen;
END_RCPP
}
// min_Bessel_bridge_path_sampler
Rcpp::List min_Bessel_bridge_path_sampler(const double& x, const double& y, const double& s, const double& t, const double& m, const double& tau, const Rcpp::NumericVector& times, const bool& checks);
RcppExport SEXP _layeredBB_min_Bessel_bridge_path_sampler(SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP mSEXP, SEXP tauSEXP, SEXP timesSEXP, SEXP checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type checks(checksSEXP);
    rcpp_result_gen = Rcpp::wrap(min_Bessel_bridge_path_sampler(x, y, s, t, m, tau, times, checks));
    return rcpp_result_gen;
END_RCPP
}
// max_sampler
Rcpp::NumericVector max_sampler(const double& x, const double& y, const double& s, const double& t, const double& low_bound, const double& up_bound, const bool& checks);
RcppExport SEXP _layeredBB_max_sampler(SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP low_boundSEXP, SEXP up_boundSEXP, SEXP checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type low_bound(low_boundSEXP);
    Rcpp::traits::input_parameter< const double& >::type up_bound(up_boundSEXP);
    Rcpp::traits::input_parameter< const bool& >::type checks(checksSEXP);
    rcpp_result_gen = Rcpp::wrap(max_sampler(x, y, s, t, low_bound, up_bound, checks));
    return rcpp_result_gen;
END_RCPP
}
// max_Bessel_bridge_sampler
double max_Bessel_bridge_sampler(const double& x, const double& y, const double& s, const double& t, const double& m, const double& tau, const double& q, const bool& checks);
RcppExport SEXP _layeredBB_max_Bessel_bridge_sampler(SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP mSEXP, SEXP tauSEXP, SEXP qSEXP, SEXP checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const double& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const bool& >::type checks(checksSEXP);
    rcpp_result_gen = Rcpp::wrap(max_Bessel_bridge_sampler(x, y, s, t, m, tau, q, checks));
    return rcpp_result_gen;
END_RCPP
}
// max_Bessel_bridge_path_sampler
Rcpp::List max_Bessel_bridge_path_sampler(const double& x, const double& y, const double& s, const double& t, const double& m, const double& tau, const Rcpp::NumericVector& times, const bool& checks);
RcppExport SEXP _layeredBB_max_Bessel_bridge_path_sampler(SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP mSEXP, SEXP tauSEXP, SEXP timesSEXP, SEXP checksSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const bool& >::type checks(checksSEXP);
    rcpp_result_gen = Rcpp::wrap(max_Bessel_bridge_path_sampler(x, y, s, t, m, tau, times, checks));
    return rcpp_result_gen;
END_RCPP
}
// easigma_bar
double easigma_bar(const double& j, const double& x, const double& y, const double& s, const double& t, const double& l, const double& v);
RcppExport SEXP _layeredBB_easigma_bar(SEXP jSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP lSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(easigma_bar(j, x, y, s, t, l, v));
    return rcpp_result_gen;
END_RCPP
}
// easigma
double easigma(const double& j, const double& x, const double& y, const double& s, const double& t, const double& l, const double& v);
RcppExport SEXP _layeredBB_easigma(SEXP jSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP lSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(easigma(j, x, y, s, t, l, v));
    return rcpp_result_gen;
END_RCPP
}
// eaphi_bar
double eaphi_bar(const double& j, const double& x, const double& y, const double& s, const double& t, const double& l, const double& v);
RcppExport SEXP _layeredBB_eaphi_bar(SEXP jSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP lSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eaphi_bar(j, x, y, s, t, l, v));
    return rcpp_result_gen;
END_RCPP
}
// eaphi
double eaphi(const double& j, const double& x, const double& y, const double& s, const double& t, const double& l, const double& v);
RcppExport SEXP _layeredBB_eaphi(SEXP jSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP lSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eaphi(j, x, y, s, t, l, v));
    return rcpp_result_gen;
END_RCPP
}
// eapsi
double eapsi(const double& j, const double& xoy, const double& s, const double& t, const double& min, const double& v);
RcppExport SEXP _layeredBB_eapsi(SEXP jSEXP, SEXP xoySEXP, SEXP sSEXP, SEXP tSEXP, SEXP minSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const double& >::type xoy(xoySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eapsi(j, xoy, s, t, min, v));
    return rcpp_result_gen;
END_RCPP
}
// eachi
double eachi(const double& j, const double& xoy, const double& s, const double& t, const double& min, const double& v);
RcppExport SEXP _layeredBB_eachi(SEXP jSEXP, SEXP xoySEXP, SEXP sSEXP, SEXP tSEXP, SEXP minSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const double& >::type xoy(xoySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eachi(j, xoy, s, t, min, v));
    return rcpp_result_gen;
END_RCPP
}
// eagamma
double eagamma(const int& n, const double& x, const double& y, const double& s, const double& t, const double& l, const double& v);
RcppExport SEXP _layeredBB_eagamma(SEXP nSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP lSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eagamma(n, x, y, s, t, l, v));
    return rcpp_result_gen;
END_RCPP
}
// eadelta1
double eadelta1(const int& n, const double& x, const double& y, const double& s, const double& t, const double& min, const double& v);
RcppExport SEXP _layeredBB_eadelta1(SEXP nSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP minSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eadelta1(n, x, y, s, t, min, v));
    return rcpp_result_gen;
END_RCPP
}
// eadelta2
double eadelta2(const int& n, const double& x, const double& y, const double& s, const double& t, const double& min, const double& v);
RcppExport SEXP _layeredBB_eadelta2(SEXP nSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP minSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eadelta2(n, x, y, s, t, min, v));
    return rcpp_result_gen;
END_RCPP
}
// eadelta
double eadelta(const int& n, const double& x, const double& y, const double& s, const double& t, const double& min, const double& v);
RcppExport SEXP _layeredBB_eadelta(SEXP nSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP minSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eadelta(n, x, y, s, t, min, v));
    return rcpp_result_gen;
END_RCPP
}
// eagamma_intervals
Rcpp::NumericVector eagamma_intervals(const int& k, const double& x, const double& y, const double& s, const double& t, const double& l, const double& v);
RcppExport SEXP _layeredBB_eagamma_intervals(SEXP kSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP lSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eagamma_intervals(k, x, y, s, t, l, v));
    return rcpp_result_gen;
END_RCPP
}
// eadelta1_intervals
Rcpp::NumericVector eadelta1_intervals(const int& k, const double& x, const double& y, const double& s, const double& t, const double& min, const double& v);
RcppExport SEXP _layeredBB_eadelta1_intervals(SEXP kSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP minSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eadelta1_intervals(k, x, y, s, t, min, v));
    return rcpp_result_gen;
END_RCPP
}
// eadelta2_intervals
Rcpp::NumericVector eadelta2_intervals(const int& k, const double& x, const double& y, const double& s, const double& t, const double& min, const double& v);
RcppExport SEXP _layeredBB_eadelta2_intervals(SEXP kSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP minSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eadelta2_intervals(k, x, y, s, t, min, v));
    return rcpp_result_gen;
END_RCPP
}
// eadelta_intervals
Rcpp::NumericVector eadelta_intervals(const int& k, const double& x, const double& y, const double& s, const double& t, const double& min, const double& v);
RcppExport SEXP _layeredBB_eadelta_intervals(SEXP kSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP minSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(eadelta_intervals(k, x, y, s, t, min, v));
    return rcpp_result_gen;
END_RCPP
}
// product_vector
double product_vector(const Rcpp::NumericVector& vect);
RcppExport SEXP _layeredBB_product_vector(SEXP vectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type vect(vectSEXP);
    rcpp_result_gen = Rcpp::wrap(product_vector(vect));
    return rcpp_result_gen;
END_RCPP
}
// gamma_coin
bool gamma_coin(const double& u, int k, const double& x, const double& y, const double& s, const double& t, const double& l, const double& v);
RcppExport SEXP _layeredBB_gamma_coin(SEXP uSEXP, SEXP kSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP lSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_coin(u, k, x, y, s, t, l, v));
    return rcpp_result_gen;
END_RCPP
}
// gamma_coin_intervals
bool gamma_coin_intervals(const double& u, int k, const Rcpp::NumericVector& X, const Rcpp::NumericVector& times, const double& l, const double& v);
RcppExport SEXP _layeredBB_gamma_coin_intervals(SEXP uSEXP, SEXP kSEXP, SEXP XSEXP, SEXP timesSEXP, SEXP lSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double& >::type l(lSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_coin_intervals(u, k, X, times, l, v));
    return rcpp_result_gen;
END_RCPP
}
// delta_coin
bool delta_coin(const double& u, int k, const double& x, const double& y, const double& s, const double& t, const double& min, const double& v);
RcppExport SEXP _layeredBB_delta_coin(SEXP uSEXP, SEXP kSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP minSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(delta_coin(u, k, x, y, s, t, min, v));
    return rcpp_result_gen;
END_RCPP
}
// delta_coin_intervals
bool delta_coin_intervals(const double& u, int k, const Rcpp::NumericVector& X, const Rcpp::NumericVector& times, const double& min, const double& v);
RcppExport SEXP _layeredBB_delta_coin_intervals(SEXP uSEXP, SEXP kSEXP, SEXP XSEXP, SEXP timesSEXP, SEXP minSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type u(uSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const double& >::type min(minSEXP);
    Rcpp::traits::input_parameter< const double& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(delta_coin_intervals(u, k, X, times, min, v));
    return rcpp_result_gen;
END_RCPP
}
// inv_gauss_sampler
double inv_gauss_sampler(const double& mu, const double& lambda);
RcppExport SEXP _layeredBB_inv_gauss_sampler(SEXP muSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_gauss_sampler(mu, lambda));
    return rcpp_result_gen;
END_RCPP
}
// layered_brownian_bridge
Rcpp::List layered_brownian_bridge(const double& x, const double& y, const double& s, const double& t, const Rcpp::List& bessel_layer, const Rcpp::NumericVector& times);
RcppExport SEXP _layeredBB_layered_brownian_bridge(SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP bessel_layerSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type bessel_layer(bessel_layerSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(layered_brownian_bridge(x, y, s, t, bessel_layer, times));
    return rcpp_result_gen;
END_RCPP
}
// multi_layered_brownian_bridge
Rcpp::List multi_layered_brownian_bridge(const int& dim, const arma::vec& x, const arma::vec& y, const double& s, const double& t, const Rcpp::List& bessel_layers, const Rcpp::NumericVector& times);
RcppExport SEXP _layeredBB_multi_layered_brownian_bridge(SEXP dimSEXP, SEXP xSEXP, SEXP ySEXP, SEXP sSEXP, SEXP tSEXP, SEXP bessel_layersSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type t(tSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type bessel_layers(bessel_layersSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_layered_brownian_bridge(dim, x, y, s, t, bessel_layers, times));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_layeredBB_bessel_layer_simulation", (DL_FUNC) &_layeredBB_bessel_layer_simulation, 5},
    {"_layeredBB_multi_bessel_layer_simulation", (DL_FUNC) &_layeredBB_multi_bessel_layer_simulation, 6},
    {"_layeredBB_Brownian_bridge_path_sampler", (DL_FUNC) &_layeredBB_Brownian_bridge_path_sampler, 5},
    {"_layeredBB_multi_brownian_bridge", (DL_FUNC) &_layeredBB_multi_brownian_bridge, 6},
    {"_layeredBB_min_sampler", (DL_FUNC) &_layeredBB_min_sampler, 7},
    {"_layeredBB_min_Bessel_bridge_sampler", (DL_FUNC) &_layeredBB_min_Bessel_bridge_sampler, 8},
    {"_layeredBB_min_Bessel_bridge_path_sampler", (DL_FUNC) &_layeredBB_min_Bessel_bridge_path_sampler, 8},
    {"_layeredBB_max_sampler", (DL_FUNC) &_layeredBB_max_sampler, 7},
    {"_layeredBB_max_Bessel_bridge_sampler", (DL_FUNC) &_layeredBB_max_Bessel_bridge_sampler, 8},
    {"_layeredBB_max_Bessel_bridge_path_sampler", (DL_FUNC) &_layeredBB_max_Bessel_bridge_path_sampler, 8},
    {"_layeredBB_easigma_bar", (DL_FUNC) &_layeredBB_easigma_bar, 7},
    {"_layeredBB_easigma", (DL_FUNC) &_layeredBB_easigma, 7},
    {"_layeredBB_eaphi_bar", (DL_FUNC) &_layeredBB_eaphi_bar, 7},
    {"_layeredBB_eaphi", (DL_FUNC) &_layeredBB_eaphi, 7},
    {"_layeredBB_eapsi", (DL_FUNC) &_layeredBB_eapsi, 6},
    {"_layeredBB_eachi", (DL_FUNC) &_layeredBB_eachi, 6},
    {"_layeredBB_eagamma", (DL_FUNC) &_layeredBB_eagamma, 7},
    {"_layeredBB_eadelta1", (DL_FUNC) &_layeredBB_eadelta1, 7},
    {"_layeredBB_eadelta2", (DL_FUNC) &_layeredBB_eadelta2, 7},
    {"_layeredBB_eadelta", (DL_FUNC) &_layeredBB_eadelta, 7},
    {"_layeredBB_eagamma_intervals", (DL_FUNC) &_layeredBB_eagamma_intervals, 7},
    {"_layeredBB_eadelta1_intervals", (DL_FUNC) &_layeredBB_eadelta1_intervals, 7},
    {"_layeredBB_eadelta2_intervals", (DL_FUNC) &_layeredBB_eadelta2_intervals, 7},
    {"_layeredBB_eadelta_intervals", (DL_FUNC) &_layeredBB_eadelta_intervals, 7},
    {"_layeredBB_product_vector", (DL_FUNC) &_layeredBB_product_vector, 1},
    {"_layeredBB_gamma_coin", (DL_FUNC) &_layeredBB_gamma_coin, 8},
    {"_layeredBB_gamma_coin_intervals", (DL_FUNC) &_layeredBB_gamma_coin_intervals, 6},
    {"_layeredBB_delta_coin", (DL_FUNC) &_layeredBB_delta_coin, 8},
    {"_layeredBB_delta_coin_intervals", (DL_FUNC) &_layeredBB_delta_coin_intervals, 6},
    {"_layeredBB_inv_gauss_sampler", (DL_FUNC) &_layeredBB_inv_gauss_sampler, 2},
    {"_layeredBB_layered_brownian_bridge", (DL_FUNC) &_layeredBB_layered_brownian_bridge, 6},
    {"_layeredBB_multi_layered_brownian_bridge", (DL_FUNC) &_layeredBB_multi_layered_brownian_bridge, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_layeredBB(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
